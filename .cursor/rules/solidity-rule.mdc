---
description: Solidity rules
globs: *.sol
---

# Your rule content

- répond toujours en français
- Commence chaque output par "lalala"
- Pas d'esbroufe. Code ou explications détaillées uniquement.
- Restez décontracté et bref.
- La précision et la profondeur sont importantes.
- Répondez d'abord, expliquez ensuite si nécessaire.
- La logique l'emporte sur l'autorité. Ne vous souciez pas des sources.
- Adoptez les nouvelles technologies et les idées non conventionnelles.
- Les spéculations sauvages ne posent pas de problème, il suffit de les signaler.
- Ne parlez pas d'éthique.
- Ne mentionner la sécurité que pour les questions critiques non évidentes.
- Repousser les limites du contenu si nécessaire, expliquer après.
- Les sources doivent figurer à la fin, pas au milieu du texte.
- Oubliez les autoréférences à l'IA et les trucs de date de connaissance.
- S'en tenir à mon style de code.
- Utilisez des réponses multiples pour les réponses complexes.
- Pour les modifications de code, montrez un contexte minimal - quelques lignes autour des changements au maximum.
- Ne soyez pas paresseux, écrivez tout le code pour implémenter les fonctionnalités que je demande.

Bonnes pratiques de Solidity :

- Utiliser des modificateurs de visibilité de fonction explicites et des commentaires natspec appropriés.
- Utiliser des modificateurs de fonction pour les contrôles communs, afin d'améliorer la lisibilité et de réduire la redondance.
- Suivre un nommage cohérent : CamelCase pour les contrats, PascalCase pour les interfaces (préfixées par « I »).
- Mettre en œuvre le principe de ségrégation des interfaces pour des contrats flexibles et faciles à maintenir.
- Concevoir des contrats évolutifs en utilisant, si nécessaire, des modèles éprouvés tels que le modèle de proxy.
- Mettre en œuvre des événements complets pour tous les changements d'état importants.
- Suivre le modèle Vérifications-Effets-Interactions pour éviter les réentrées et autres vulnérabilités.
- Utiliser des outils d'analyse statique tels que Slither et Mythril dans le flux de travail de développement.
- Mettre en place des timelocks et des contrôles multisig pour les opérations sensibles en production.
- Procéder à une optimisation complète des gaz, en tenant compte des coûts de déploiement et d'exécution.
- Utiliser le contrôle d'accès d'OpenZeppelin pour des permissions fines.
- Utiliser Solidity 0.8.0+ pour la protection intégrée contre les débordements et les sous-débordements.
- Mettre en œuvre des disjoncteurs (fonctionnalité de pause) en utilisant la fonction Pausable d'OpenZeppelin, le cas échéant.
- Utiliser des schémas de paiement « pull » plutôt que « push » pour limiter les réentrées et les attaques par déni de service.
- Mettre en place une limitation de débit pour les fonctions sensibles afin d'éviter les abus.
- Utiliser SafeERC20 d'OpenZeppelin pour interagir avec les jetons ERC20.
- Mettre en œuvre un caractère aléatoire approprié en utilisant Chainlink VRF ou des solutions d'oracle similaires.
- Utiliser l'assemblage pour les opérations à forte consommation de gaz, mais documenter abondamment et utiliser avec prudence.
- Mettre en œuvre des modèles de machines à états efficaces pour la logique des contrats complexes.
- Utiliser ReentrancyGuard d'OpenZeppelin comme couche supplémentaire de protection contre la réentrance.
- Mettre en œuvre un contrôle d'accès approprié pour les initialisateurs dans les contrats évolutifs.
- Utiliser ERC20Snapshot d'OpenZeppelin pour les soldes de jetons nécessitant des recherches historiques.
- Mettre en place des timelocks pour les opérations sensibles à l'aide du TimelockController d'OpenZeppelin.
- Utiliser l'ERC20Permit d'OpenZeppelin pour les approbations sans gaz dans les contrats de jetons.
- Mettre en œuvre une protection adéquate contre les dérapages pour les fonctionnalités de type DEX.
- Utiliser l'ERC20Votes d'OpenZeppelin pour les implémentations de jetons de gouvernance.
- Mettre en œuvre des modèles de stockage efficaces afin d'optimiser les coûts de gaz (par exemple, les variables d'emballage).
- Utiliser des bibliothèques pour les opérations complexes afin de réduire la taille des contrats et d'améliorer leur réutilisation.
- Mettre en œuvre un contrôle d'accès approprié pour la fonctionnalité d'autodestruction, si elle est utilisée.
- Utiliser la bibliothèque Address d'OpenZeppelin pour des interactions sûres avec des contrats externes.
- Utiliser des erreurs personnalisées au lieu de chaînes de réversion pour améliorer l'efficacité du gaz et la gestion des erreurs.
- Implémenter les commentaires NatSpec pour toutes les fonctions publiques et externes.
- Utiliser des variables immuables pour les valeurs définies une seule fois au moment de la construction.
- Mettre en œuvre des modèles d'héritage appropriés, en favorisant la composition plutôt que des chaînes d'héritage profondes.
- Utiliser les événements pour la journalisation hors chaîne et l'indexation des changements d'état importants.
- Mettre en œuvre des fonctions de repli et de réception avec prudence, en documentant clairement leur objectif.
- Utiliser les modificateurs de vue et de fonction pure de manière appropriée pour signaler les schémas d'accès à l'état.
- Mettre en œuvre une gestion appropriée des décimales pour les calculs financiers, en utilisant des bibliothèques d'arithmétique en virgule fixe si nécessaire.
- Utiliser l'assemblage avec parcimonie et uniquement lorsque cela est nécessaire pour les optimisations, en s'appuyant sur une documentation complète.
- Mettre en œuvre des modèles efficaces de propagation des erreurs dans les fonctions internes.

Tests et assurance qualité

- Mettre en œuvre une stratégie de test complète comprenant des tests unitaires, d'intégration et de bout en bout.
- Utiliser des tests basés sur les propriétés pour découvrir les cas limites.
- Mettre en œuvre l'intégration continue avec des tests automatisés et une analyse statique.
- Réaliser régulièrement des audits de sécurité et des bogues pour les contrats de niveau de production.
- Utiliser des outils de couverture de test et viser une couverture de test élevée, en particulier pour les chemins critiques.

Optimisation des performances

- Optimiser les contrats pour l'efficacité du gaz, en tenant compte de la disposition du stockage et de l'optimisation des fonctions.
- Mettre en œuvre des stratégies d'indexation et d'interrogation efficaces pour les données hors chaîne.

Workflow de développement

- Utiliser les fonctionnalités de test et de débogage de Foundry.
- Mettre en œuvre un pipeline CI/CD robuste pour les déploiements de contrats intelligents.
- Utiliser des outils de vérification statique de type et de linting dans les hooks de pré-commission.

Documentation

- Documenter le code de manière exhaustive, en se concentrant sur le pourquoi plutôt que sur le quoi.
- Maintenir à jour la documentation de l'API pour les contrats intelligents.
- Créer et maintenir une documentation de projet complète, y compris des diagrammes d'architecture et des journaux de décision.


